<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>极客教程</title>
  
  <subtitle>geekes&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekes.github.io/"/>
  <updated>2019-09-13T11:49:37.891Z</updated>
  <id>https://geekes.github.io/</id>
  
  <author>
    <name>yixuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="https://geekes.github.io/2019/09/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://geekes.github.io/2019/09/11/Linux常用命令/</id>
    <published>2019-09-11T09:48:00.000Z</published>
    <updated>2019-09-13T11:49:37.891Z</updated>
    
    <content type="html"><![CDATA[<p>切换目录</p><h1 id="cd-usr"><a href="#cd-usr" class="headerlink" title="cd /usr"></a>cd /usr</h1><p> 切换到/usr目录下 注：Linux的文件系统和Windows不一样<br>查看目录下的文件</p><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p>ls -lh<br> ls 用来遍历当前目录下所有的文件和目录 ls -lh 遍历详细信息，如权限，所属用户，创建日期，大小等等信息<br>查看当前所处目录</p><h1 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h1><p> 使用pwd命令来显示当前所处与的目录<br>创建目录</p><p>m###### kdir -p /test/abc<br> 创建目录 /test/abc -p的意思是如果abc的父目录不存在，就会帮助创建其父目录<br>创建文件</p><p>#touch test.java<br> 创建test.java文件<br>删除文件</p><h1 id="rm-f-test-java"><a href="#rm-f-test-java" class="headerlink" title="rm -f test.java"></a>rm -f test.java</h1><p> 使用rm命令删除文件。 -f是强制删除的意思<br>删除目录</p><h1 id="rm-rf-test-abc"><a href="#rm-rf-test-abc" class="headerlink" title="rm -rf /test/abc"></a>rm -rf /test/abc</h1><p> rm 命令也可以用来删除目录 -r表示删除目录 f表示强制<br>查看文件内容<br>查看文件的命令有多种，这里用tail</p><h1 id="tail-50f-etc-passwd"><a href="#tail-50f-etc-passwd" class="headerlink" title="tail -50f /etc/passwd"></a>tail -50f /etc/passwd</h1><p> 查看 /ect/passwd 文件的内容， -50 表示查看最后50行 f表示滚动查看，当这个文件发生变化的时候，会自动展示最新的内容。 这种方式特别适合查看日志文件。 在后续的tomcat日志文件那里就会用这种方式。 退出方式： ctrl+c</p><h1 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h1><p>使用Tab键来进行命令补全,作用是补全文件名或者路径</p><h1 id="Ctrl-c"><a href="#Ctrl-c" class="headerlink" title="Ctrl+c"></a>Ctrl+c</h1><p>当你在 Linux 命令行中无意输入了一个不知道的命令，或者错误地使用了一个命令，导致在终端里出现了你无法预料的情况,使用Ctrl+c键来强行终止当前程序(并不会使终端退出)</p><h1 id="按键作用"><a href="#按键作用" class="headerlink" title="按键作用"></a>按键作用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+d键盘输入结束或退出终端</span><br><span class="line">Ctrl+s暂停当前程序，暂停后按下任意键恢复运行</span><br><span class="line">Ctrl+z将当前程序放到后台运行，恢复到前台为命令fg</span><br><span class="line">Ctrl+a将光标移至输入行头，相当于Home键</span><br><span class="line">Ctrl+e将光标移至输入行末，相当于End键</span><br><span class="line">Ctrl+k删除从光标所在位置到行末</span><br><span class="line">Alt+Backspace向前删除一个单词</span><br><span class="line">Shift+PgUp将终端显示向上滚动</span><br><span class="line">Shift+PgDn将终端显示向下滚动</span><br><span class="line">Shell通配符是一种特殊语句，主要有星号（*）和问号（?），用来对字符串进行模糊匹配（比如文件名、参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正字符。</span><br><span class="line">终端里面输入的通配符是由 Shell 处理的，不是由所涉及的命令语句处理的，它只会出现在命令的“参数值”里（不能出现在命令名称里， 命令不记得，那就用Tab补全）。当 Shell 在“参数值”中遇到了通配符时，Shell 会将其当作路径或文件名在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换（路径扩展）；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。通配符实际上就是一种 Shell 实现的路径扩展功能。在通配符被处理后， Shell 会先完成该命令的重组，然后继续处理重组后的命令，直至执行该命令</span><br><span class="line">Shell 常用通配符：</span><br><span class="line"> 字符含义</span><br><span class="line">*匹配 0 或多个字符</span><br><span class="line">?匹配任意一个字符</span><br><span class="line">[list]匹配 list 中的任意单一字符</span><br><span class="line">[^list]匹配 除list 中的任意单一字符以外的字符</span><br><span class="line">[c1-c2]匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</span><br><span class="line">&#123;string1,string2,...&#125;匹配 string1 或 string2 (或更多)其一字符串</span><br><span class="line">&#123;c1..c2&#125;匹配 c1-c2 中全部字符 如&#123;1..10&#125;</span><br></pre></td></tr></table></figure><p>#其他常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ls      列出目录</span><br><span class="line">ls -al     使用格式化列出隐藏文件</span><br><span class="line">cd dir      进入目录dir</span><br><span class="line">cd       进入home目录</span><br><span class="line">pwd        显示当前目录</span><br><span class="line">mkdir dir     创建目录dir</span><br><span class="line">rm file      删除文件file</span><br><span class="line">rm -r  dir     删除目录dir</span><br><span class="line">rm -f file     强制删除file</span><br><span class="line">rm - rf dir     强制目录dir</span><br><span class="line">cp file1 file2     将file1复制file2</span><br><span class="line">cp -r dir1 dir2     将dir1复制dir2;如果dir2不存在则创建它</span><br><span class="line">mv file1 file2    将file1重命名或移动到file2;如果file2是已存在目录将file1移动到目录file2中</span><br><span class="line">ln -s fie link   创建file的符号连接link</span><br><span class="line">touch file    创建file的文件</span><br><span class="line">cat &gt; file    将标准输入添加到file</span><br><span class="line">more file    查看file的内容</span><br><span class="line">tail -f file   从后10行开始查看file的内容</span><br><span class="line">man command    显示command的说明手册</span><br><span class="line">ps    显示当前的活动进程</span><br><span class="line">top   显示所有正在运行的进程</span><br><span class="line">kill pid    杀掉进程id pid</span><br><span class="line">killall proc    杀掉所有名为proc的进程</span><br><span class="line">chmod octal file    更改file的权限</span><br><span class="line">grep pattern files   搜索files中匹配pattern的内容</span><br><span class="line">df    显示磁盘占用情况</span><br><span class="line">du    显示目录空间占用情况</span><br><span class="line">tar xzf file.tar.gz    使用Gzip解压tar文件</span><br><span class="line">tar xjf file.tar.bz2   使用Bzip2解压tar文件</span><br><span class="line">ping host  ping host   并输出结果</span><br><span class="line">wget file    下载file</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;切换目录&lt;/p&gt;
&lt;h1 id=&quot;cd-usr&quot;&gt;&lt;a href=&quot;#cd-usr&quot; class=&quot;headerlink&quot; title=&quot;cd /usr&quot;&gt;&lt;/a&gt;cd /usr&lt;/h1&gt;&lt;p&gt; 切换到/usr目录下 注：Linux的文件系统和Windows不一样&lt;br&gt;查
      
    
    </summary>
    
    
      <category term="Liunx" scheme="https://geekes.github.io/categories/Liunx/"/>
    
    
      <category term="Linux" scheme="https://geekes.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://geekes.github.io/2019/09/10/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://geekes.github.io/2019/09/10/git常用命令/</id>
    <published>2019-09-10T13:12:05.000Z</published>
    <updated>2019-09-13T07:51:52.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h1><p> 初始化仓库，如果初始化成功，执行了 git init命令的目录下就会生成 .git 目录。这个 .git 目录里存储着管理当前目录内容所需的仓库数据。</p><h1 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h1><p> 查看仓库的状态，工作树和仓库在被操作的过程中，状态会不断发生变化。在 Git 操作过程中时常用 git status命令查看当前状态，可谓基本中的基本。<br> 当文件太多时，进入某个文件夹，使用git status . 可以只查看这个文件夹中的git状态。</p><h1 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h1><p>向暂存区中添加文件，如果只是用 Git 仓库的工作树创建了文件，那么该文件并不会被记入 Git 仓库的版本管理对象当中。要想让文件成为 Git 仓库的管理对象，就需要用 git add命令将其加入暂存区（Stage 或者 Index）中。暂存区是提交之前的一个临时区域。 </p><h1 id="git-add-1"><a href="#git-add-1" class="headerlink" title="git add"></a>git add</h1><p> xx命令可以将xx文件或目录添加到暂存区</p><h1 id="git-add-A"><a href="#git-add-A" class="headerlink" title="git add -A ."></a>git add -A .</h1><p>来一次添加所有改变的文件。注意 -A 选项后面还有一个句点. git add -A表示添加所有内容</p><h1 id="git-add-2"><a href="#git-add-2" class="headerlink" title="git add ."></a>git add .</h1><p>表示添加新文件和编辑过的文件不包括删除的文件</p><h1 id="git-add-u"><a href="#git-add-u" class="headerlink" title="git add -u"></a>git add -u</h1><p>表示添加编辑或者删除的文件，不包括新添加的文件。</p><h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><p>保存仓库的历史记录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式 git commit -m description，例 git commit -m &quot;提交描述&quot;。windows下，请注意使用双引号，否则可能出现错误：error: pathspec &apos;commit&apos;&apos; did not match any file(s) known to git.</span><br><span class="line">如果想要记述得更加详细，请不加 -m，直接执行 git commit命令。执行后编辑器就会启动。在编辑器中记述提交信息的格式如下： </span><br><span class="line">第一行：用一行文字简述提交的更改内容</span><br><span class="line">第二行：空行</span><br><span class="line">第三行以后：记述更改的原因和详细内容</span><br><span class="line">将提交信息按格式记述完毕后，请保存并关闭编辑器，以 #（井号）标为注释的行不必删除。随后，刚才记述的提交信息就会被提交。</span><br><span class="line">中止提交 如果在编辑器启动后想中止提交，请将提交信息留空并直接关闭编辑器，随后提交就会被中止。</span><br><span class="line">只要按照上面的格式输入，今后便可以通过确认日志的命令或工具看到这些记录。</span><br><span class="line">在以 #（井号）标为注释的 Changes to be committed（要提交的更改）栏中，可以查看本次提交中包含的文件。</span><br><span class="line">git 提交出现这个错误：fatal: Unable to create ‘project_path/.git/index.lock’: File exists. </span><br><span class="line">解决方案：需要删除.git\index.lock，在cmder中无法删除，可以使用git bash。</span><br></pre></td></tr></table></figure><h1 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">只显示提交信息的第一行 可以在 git log命令后加上 --pretty=short</span><br><span class="line">只显示指定目录、文件的日志 只要在 git log命令后加上目录名，便会只显示该目录下的日志。如果加的是文件名，就会只显示与该文件相关的日 志。</span><br><span class="line">显示文件的改动 如果想查看提交所带来的改动，可以加上 -p 参数，文件的前后差别就会显示在提交信息之后。</span><br><span class="line">查看更改前后的差别 git diff命令可以查看工作树、暂存区之间的差别。在没把文件加入暂存区时，使用git diff会显示暂存区和工作树之间的差别 </span><br><span class="line">及没把修改文件加入暂存区前，使用git diff进行比对，如果已经把修改的文件加入暂存区了，使用git diff是无法比对的。</span><br><span class="line">查看工作树和最新提交的差别 git diff HEAD查看本次提交与上次提交之间有什么差别, HEAD 是指向当前分支中最新一次提交的指针。 </span><br><span class="line">即指git add添加到暂存区的文件和上次提交(工作树)文件的差别</span><br><span class="line">不妨养成这样一个好习惯：在执行 git commit命令之前先执行git diff HEAD命令，查看本次提交与上次提交之间有什么差别，等确认完毕后再进行 提交。</span><br><span class="line">比对文件更改前后差别，没添加暂存区时使用git diff，添加暂存区后使用git diff head</span><br><span class="line">比较本地分支和远程分支的差别 git log 本地分支名.. 远程主机名/远程分支名，可以加-p参数比较具体修改</span><br></pre></td></tr></table></figure><h1 id="git-diff命令总结："><a href="#git-diff命令总结：" class="headerlink" title="git diff命令总结："></a>git diff命令总结：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">working tree：就是你所工作在的目录，每当你在代码中进行了修改，working tree的状态就改变了。</span><br><span class="line">index file：是索引文件，它是连接working tree和commit的桥梁，每当我们使用git-add命令来登记后，index file的内容就改变了，此时index file就和working tree同步了。</span><br><span class="line">commit：是最后的阶段，只有commit了，我们的代码才真正进入了git仓库。我们使用git commit就是将index file里的内容提交到commit中</span><br><span class="line">git diff：是查看working tree与index file的差别的。</span><br><span class="line">git diff --cached：是查看index file与commit的差别的。</span><br><span class="line">git diff HEAD：是查看working tree和commit的差别的。（你一定没有忘记，HEAD代表的是最近的一次commit的信息）</span><br><span class="line">查看简单的diff结果，可以加上–stat参数：git diff --stat</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-init&quot;&gt;&lt;a href=&quot;#git-init&quot; class=&quot;headerlink&quot; title=&quot;git init&quot;&gt;&lt;/a&gt;git init&lt;/h1&gt;&lt;p&gt; 初始化仓库，如果初始化成功，执行了 git init命令的目录下就会生成 .git 目录。
      
    
    </summary>
    
    
      <category term="git" scheme="https://geekes.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://geekes.github.io/tags/git/"/>
    
  </entry>
  
</feed>
