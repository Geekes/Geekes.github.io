<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>极客教程</title>
  
  <subtitle>geekes&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geekes.github.io/"/>
  <updated>2020-02-28T13:05:57.951Z</updated>
  <id>https://geekes.github.io/</id>
  
  <author>
    <name>yixuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uni-app入门指南</title>
    <link href="https://geekes.github.io/2020/02/28/uni-app%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://geekes.github.io/2020/02/28/uni-app入门指南/</id>
    <published>2020-02-28T09:28:53.000Z</published>
    <updated>2020-02-28T13:05:57.951Z</updated>
    
    <content type="html"><![CDATA[<p>uni-app是一个使用Vue.js开发跨平台应用的前端框架，开发者编写一套代码，可编译到的iOS，安卓，H5，小程序等多个平台<br>首先开发者需先下载安装<br>HBuilderX官网:<a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">https://www.dcloud.io/hbuilderx.html</a><br>在HBuilderX 点击工具栏里的文件 - &gt;新建 - &gt;项目：<br>选择uni-app，输入工程名,点击创建，即可成功创建uni-app<br><img src="/images/39.PNG" alt><br>项目目录<br><img src="/images/40.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;uni-app是一个使用Vue.js开发跨平台应用的前端框架，开发者编写一套代码，可编译到的iOS，安卓，H5，小程序等多个平台&lt;br&gt;首先开发者需先下载安装&lt;br&gt;HBuilderX官网:&lt;a href=&quot;https://www.dcloud.io/hbuilderx.h
      
    
    </summary>
    
    
      <category term="uni-app" scheme="https://geekes.github.io/categories/uni-app/"/>
    
    
      <category term="uni-app" scheme="https://geekes.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>Postman安装与使用</title>
    <link href="https://geekes.github.io/2020/02/28/Postman%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://geekes.github.io/2020/02/28/Postman安装与使用/</id>
    <published>2020-02-28T08:25:00.000Z</published>
    <updated>2020-02-28T08:39:07.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postman简介"><a href="#postman简介" class="headerlink" title="postman简介"></a>postman简介</h1><p>postman在做接口测试方面，发挥着越来越重大的作用，其支持多种请求方式、并可以模拟各种类型的数据请求类型，在实际开发中使用它可以极大的提高开发的效率</p><h1 id="postman其主要功能包括："><a href="#postman其主要功能包括：" class="headerlink" title="postman其主要功能包括："></a>postman其主要功能包括：</h1><ul><li>模拟各种HTTP requests<br>从常用的 GET、POST 到 RESTful 的 PUT 、 DELETE …还可以发送文件、送出额外的 header</li><li>Collection 功能（测试集合）<br>Collection 是 requests的集合，在做完一个测试后， 可以把这次的 request 存到特定的 Collection 里面，下次要做同样的测试时，就不需要重新输入<br>一个collection可以包含多条request，如果把一个request当成一个test case，那collection就可以看成是一个test suite<br>通过collection的归类，可以良好的分类测试软件所提供的API<br>Collection 还可以 Import 或是 Share 出來，让团队里面的所有人共享你建立起来的 Collection</li><li>人性化的Response整理<br>Postman 可以针对response内容的格式自动美化。 JSON、 XML 或是 HTML 都会整理成可以阅读的格式</li><li>内置测试脚本语言<br>Postman支持编写测试脚本，可以快速的检查request的结果，并返回测试结果</li><li>设定变量与环境<br>Postman 可以自由 设定变量与Environment，一般在编辑request，校验response的时候，总会需要重复输入某些字符，比如URL，postman允许设定变量来保存这些值。并且把变量保存在不同的环境中</li></ul><h1 id="官网安装-https-www-getpostman-com"><a href="#官网安装-https-www-getpostman-com" class="headerlink" title="官网安装:https://www.getpostman.com"></a>官网安装:<a href="https://www.getpostman.com" target="_blank" rel="noopener">https://www.getpostman.com</a></h1><p><img src="/images/32.png" alt></p><h1 id="非官方安装："><a href="#非官方安装：" class="headerlink" title="非官方安装："></a>非官方安装：</h1><p>安装（安装到chrome插件）<br>在安装时，最好是通过chrome浏览器打开chrome网上应用店直接添加到chrome插件中<br>进入chrome网上应用店，可以通过谷歌访问助手访问，大体步骤如下：</p><ul><li>打开chrome浏览器的chrome网上应用店，搜索postman</li><li>点击添加至CHROME</li></ul><p>如果是直接从网上先把postman下载安装chrome上去<br><img src="/images/33.png" alt><br>更名：将.crx文件更改文件名为.zip或者.rar，进行解压<br>拷贝：将解压出的文件夹拷贝到你自定义的文件夹中<br>加载程序：在 Chrome 浏览器中选择 “更多工具”—“扩展程序”—“加载已解压的扩展程序”</p><h1 id="Postman主界面"><a href="#Postman主界面" class="headerlink" title="Postman主界面:"></a>Postman主界面:</h1><p><img src="/images/34.png" alt></p><h1 id="请求方式的特点"><a href="#请求方式的特点" class="headerlink" title="请求方式的特点"></a>请求方式的特点</h1><p>在postman中常用的请求方式为get、post、put、patch、delete、head等</p><ul><li>GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）</li><li>POST请求：向指定资源提交数据进行处理请求，数据被包含在请求体中。POST请求可能会导致新的资源的建立、已有资源的修改。（通常用来发送数据）</li><li>HEAD请求：类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li>PUT请求：从客户端向服务器传送的数据取代指定的文档的内容</li><li>DELETE请求：请求服务器删除指定的页面。</li><li>CONNECT请求：能够将连接改为管道方式的代理服务器</li><li>OPTIONS请求：允许客户端查看服务器的性能</li><li>TRACE请求：显示服务器收到的请求，主要用于测试或诊断</li><li>接口调用传参方式：key-value参数形式，Json串传参形式</li><li>key-value参数：把参数拼接在url的后面由?相连，多个参数之间用&amp;相连</li><li>Json串传参：需要在请求的body写中，入Json格式参数<br><img src="/images/35.png" alt></li></ul><h2 id="GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）"><a href="#GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）" class="headerlink" title="GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）"></a>GET请求：请求指定的页面信息，并返回实体主体。（通常用来接收数据）</h2><p><img src="/images/36.png" alt></p><p>##POST请求：向指定资源提交数据进行处理请求，数据被包含在请求体中。POST请求可能会导致新的资源的建立、已有资源的修改。（通常用来发送数据）</p><h2 id="Body：设置POST请求的参数"><a href="#Body：设置POST请求的参数" class="headerlink" title="Body：设置POST请求的参数"></a>Body：设置POST请求的参数</h2><ul><li>form-data： HTTP请求中的multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开</li><li>x-wwww-form-urlencode：HTTP请求中的application/x-www-from-urlencoded，会将表单内的数据转换为键值对</li><li>raw：可以发送任意格式的接口数据，可以text、json、xml、html等</li><li>binary：HTTP请求中的相Content-Type:application/octet-stream，只可以发送二进制数据。通常用于文件的上传</li></ul><h2 id="binary：HTTP请求中的相Content-Type-application-octet-stream，只可以发送二进制数据。通常用于文件的上传"><a href="#binary：HTTP请求中的相Content-Type-application-octet-stream，只可以发送二进制数据。通常用于文件的上传" class="headerlink" title="binary：HTTP请求中的相Content-Type:application/octet-stream，只可以发送二进制数据。通常用于文件的上传"></a>binary：HTTP请求中的相Content-Type:application/octet-stream，只可以发送二进制数据。通常用于文件的上传</h2><p><img src="/images/37.png" alt></p><h2 id="rows可以上传任意格式的文本，可以上传text、json、xml、html等"><a href="#rows可以上传任意格式的文本，可以上传text、json、xml、html等" class="headerlink" title="rows可以上传任意格式的文本，可以上传text、json、xml、html等"></a>rows可以上传任意格式的文本，可以上传text、json、xml、html等</h2><p><img src="/images/38.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;postman简介&quot;&gt;&lt;a href=&quot;#postman简介&quot; class=&quot;headerlink&quot; title=&quot;postman简介&quot;&gt;&lt;/a&gt;postman简介&lt;/h1&gt;&lt;p&gt;postman在做接口测试方面，发挥着越来越重大的作用，其支持多种请求方式、并可以模
      
    
    </summary>
    
    
      <category term="测试" scheme="https://geekes.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://geekes.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Ajax入门指南</title>
    <link href="https://geekes.github.io/2020/02/18/Ajax%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://geekes.github.io/2020/02/18/Ajax入门指南/</id>
    <published>2020-02-18T15:14:18.000Z</published>
    <updated>2020-02-29T13:19:20.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h1><p>AJAX=Asynchronous JavaScript and XML（异步的JavaScript和XML）<br>AJAX不是新的编程语言,而是一种使用现有标准的新方法<br>AJAX是与服务器交换数据并更新部分网页的艺术,在不重新加载整个页面的情况下<br>AJAX不需要任何浏览器插件,但需要用户允许JavaScript在浏览器上执行<br><img src="/images/2.gif" alt><br>XMLHttpRequest是 AJAX 的基础。<br>XMLHttpRequest对象<br>所有现代浏览器均支持XMLHttpRequest对象（IE5 和 IE6 使用 ActiveXObject）<br>XMLHttpRequest用于在后台与服务器交换数据<br>这意味着可以在不重新加载整个网页的情况下,对网页的某部分进行更新<br>为了应对所有的现代浏览器,包括IE5和IE6,请检查浏览器是否支持 XMLHttpRequest对象<br>如果支持,则创建XMLHttpRequest对象。如果不支持,则创建ActiveXObject:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line">if (window.XMLHttpRequest)</span><br><span class="line">  &#123;IE7+, Firefox, Chrome, Opera, Safari</span><br><span class="line">//创建XMLHttpRequest对象的语法:</span><br><span class="line">  xmlhttp=new XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">  &#123;code for IE6, IE5</span><br><span class="line">//老版本的 Internet Explorer(IE5和IE6)使用ActiveX对象:</span><br><span class="line">  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>向服务器发送请求<br>将请求发送到服务器,我们使用XMLHttpRequest对象的open()和send()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;ajax.txt&quot;,true);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>请求的网址、请求方法get/post<br>提交请求的内容数据、请求主体等<br>接收响应回来的内容<br>发送Ajax请求的五个步骤:<br>1.创建异步对象。即 XMLHttpRequest 对象。<br>2.设置请求的参数。包括：请求的方法、请求的url。<br>3.发送请求<br>4.注册事件,onreadystatechange事件,状态改变时就会调用在数据完整请求回来的时候才调用，需要写一些判断的逻辑<br>5.获取返回的数据</p><h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function load()&#123;</span><br><span class="line"></span><br><span class="line">            var xmlhttp;</span><br><span class="line">            if(window.XMLHttpRequest)&#123;</span><br><span class="line">      //  (1)创建异步对象</span><br><span class="line">         xmlhttp = new XMLHttpRequest();     </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">// (2)设置请求的参数。包括：请求的方法、请求的url。</span><br><span class="line">      xmlhttp.open(&quot;GET&quot;,&apos;ajax.txt&apos;,true);</span><br><span class="line">//(3)发送请求</span><br><span class="line">      xmlhttp.send();</span><br><span class="line">//(4)注册事件</span><br><span class="line"> onreadystatechange事件,状态改变时就会调用</span><br><span class="line">        //在数据完整请求回来的时候才调用,写一些判断的逻辑</span><br><span class="line">         /* </span><br><span class="line">    readyState</span><br><span class="line">        0: 请求未初始化</span><br><span class="line">        1: 服务器连接已建立</span><br><span class="line">        2: 请求已接收</span><br><span class="line">        3: 请求处理中</span><br><span class="line">        4: 请求已完成，且响应已就绪</span><br><span class="line">    status</span><br><span class="line">        200 OK</span><br><span class="line">        404 Not Found</span><br><span class="line">    */</span><br><span class="line">      xmlhttp.onreadystatechange = function()&#123;</span><br><span class="line">        if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123;</span><br><span class="line">//(5)在注册的事件中,获取返回的内容,并修改页面的显示</span><br><span class="line">            document.getElementById(&quot;Div&quot;).innerHTML = xmlhttp.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;Div&quot;&gt;&lt;h3&gt;修改文本的内容&lt;/h3&gt;&lt;/div&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; onclick=&quot;load()&quot;&gt;修改文本&lt;/button&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="异步-True或False？"><a href="#异步-True或False？" class="headerlink" title="异步-True或False？"></a>异步-True或False？</h2><p>AJAX指的是异步JavaScript和XML（Asynchronous JavaScript and XML）<br>XMLHttpRequest对象如果要用于 AJAX 的话,其 open() 方法的 async 参数必须设置为true:<br>通过AJAX,JavaScript无需等待服务器的响应,而是:<br>1.在等待服务器响应时执行其他脚本<br>2.当响应就绪后对响应进行处理</p><h2 id="PHP与AJAX"><a href="#PHP与AJAX" class="headerlink" title="PHP与AJAX"></a>PHP与AJAX</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    ul li&#123;</span><br><span class="line">       list-style: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;获取 json 数据&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;button&quot;  value=&quot;获取json&quot; id=&apos;ajax&apos;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // 获取的是一个数据</span><br><span class="line">    // document.querySelectorAll(selector)</span><br><span class="line">    //如果要获取多个数据</span><br><span class="line">    document.querySelector(&quot;#ajax&quot;).onclick = function () &#123;</span><br><span class="line">        var ajax = new XMLHttpRequest();</span><br><span class="line">        ajax.open(&apos;get&apos;,&apos;ajax.php&apos;);</span><br><span class="line">        ajax.send();</span><br><span class="line">        ajax.onreadystatechange = function () &#123;</span><br><span class="line">            if (ajax.readyState==4&amp;&amp;ajax.status==200) &#123;</span><br><span class="line">                // json 字符串 是字符串 所以我们可以 通过  responseText获取</span><br><span class="line">                console.log(ajax.responseText);</span><br><span class="line">                // 转化为 js对象</span><br><span class="line">                var Obj = JSON.parse(ajax.responseText);</span><br><span class="line">                console.log(Obj);</span><br><span class="line">                // 拼接ul s</span><br><span class="line">                var str = &apos;&apos;;</span><br><span class="line">                str+=&apos;&lt;ul&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;li&gt;&apos;+Obj.name+&apos;&lt;/li&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;li&gt;&apos;+Obj.age+&apos;&lt;/li&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;li&gt;&apos;+Obj.sex+&apos;&lt;/li&gt;&apos;;</span><br><span class="line">                str+=&apos;&lt;ul&gt;&apos;;</span><br><span class="line">               //设置到页面</span><br><span class="line">                document.body.innerHTML = str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>ajax.php:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo  file_get_contents(&apos;package.json&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>package.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小明&quot;,</span><br><span class="line">  &quot;age&quot;:&quot;14&quot;,</span><br><span class="line">  &quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回json格式"><a href="#返回json格式" class="headerlink" title="返回json格式"></a>返回json格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">      &lt;select id=&quot;city&quot;&gt;&lt;/select&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;获取&quot; id=&quot;get&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var get = document.getElementById(&quot;get&quot;);</span><br><span class="line">    var city = document.getElementById(&quot;city&quot;);</span><br><span class="line"> </span><br><span class="line">    get.onclick = function () &#123;</span><br><span class="line">      //创建XHR对象</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      //设置请求URL</span><br><span class="line">      var url = &quot;./ajax.php&quot;;</span><br><span class="line">      //设置XHR对象readyState变化时响应函数</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //readyState是请求的状态，为4表示请求结束</span><br><span class="line">        if (xhr.readyState == 4) &#123;</span><br><span class="line">          //responseText服务器响应的内容</span><br><span class="line">          //通过eval把传来的json字符串转成对象</span><br><span class="line">          var data = eval(this.responseText);</span><br><span class="line">          var str = &quot;&quot;;</span><br><span class="line">          for(var ix in data) &#123;</span><br><span class="line">            str += &quot;&lt;option value=&apos;&quot; + data[ix].id + &quot;&apos;&gt;&quot; + data[ix].name + &quot;&lt;/option&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">          city.innerHTML = str;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //打开链接</span><br><span class="line">      xhr.open(&quot;get&quot;, url, true);</span><br><span class="line">      //发送请求</span><br><span class="line">      xhr.send(null);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ajax.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data = array(</span><br><span class="line">  array(&apos;id&apos; =&gt; 1, &apos;name&apos; =&gt; &apos;上海&apos;),</span><br><span class="line">  array(&apos;id&apos; =&gt; 2, &apos;name&apos; =&gt; &apos;北京&apos;),</span><br><span class="line">  array(&apos;id&apos; =&gt; 3, &apos;name&apos; =&gt; &apos;深圳&apos;),</span><br><span class="line">);</span><br><span class="line">echo json_encode($data);</span><br></pre></td></tr></table></figure><h2 id="返回xml格式"><a href="#返回xml格式" class="headerlink" title="返回xml格式"></a>返回xml格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;news&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;获取&quot; id=&quot;get&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var get = document.getElementById(&quot;get&quot;);</span><br><span class="line">    var news = document.getElementById(&quot;news&quot;);</span><br><span class="line"> </span><br><span class="line">    get.onclick = function () &#123;</span><br><span class="line">      //创建XHR对象</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      //设置请求URL</span><br><span class="line">      var url = &quot;./ajax.php&quot;;</span><br><span class="line">      //设置XHR对象readyState变化时响应函数</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //readyState是请求的状态，为4表示请求结束</span><br><span class="line">        if (xhr.readyState == 4) &#123;</span><br><span class="line">          //responseXML服务器响应的内容</span><br><span class="line">          var data = this.responseXML;</span><br><span class="line">          var str = &quot;&quot;;</span><br><span class="line">          var title = data.getElementsByTagName(&quot;title&quot;);</span><br><span class="line">          str += &quot;&lt;p&gt;&quot; + title[0].childNodes[0].nodeValue + &quot;&lt;/p&gt;&quot;;</span><br><span class="line">          str += &quot;&lt;p&gt;&quot; + title[1].childNodes[0].nodeValue + &quot;&lt;/p&gt;&quot;;</span><br><span class="line">          str += &quot;&lt;p&gt;&quot; + title[2].childNodes[0].nodeValue + &quot;&lt;/p&gt;&quot;;</span><br><span class="line">          news.innerHTML = str;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //打开链接</span><br><span class="line">      xhr.open(&quot;get&quot;, url, true);</span><br><span class="line">      //发送请求</span><br><span class="line">      xhr.send(null);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ajax.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;Content-Type: text/xml;charset=utf-8&apos;);</span><br><span class="line">$xml = &lt;&lt;&lt;EOD</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;news&gt;</span><br><span class="line">  &lt;title&gt;111&lt;/title&gt;</span><br><span class="line">  &lt;title&gt;222&lt;/title&gt;</span><br><span class="line">  &lt;title&gt;333&lt;/title&gt;</span><br><span class="line">&lt;/news&gt;</span><br><span class="line">EOD;</span><br><span class="line">echo $xml;</span><br></pre></td></tr></table></figure><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot; id=&quot;name&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;password&quot; name=&quot;pwd&quot; value=&quot;&quot; id=&quot;pwd&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; name=&quot;sub&quot; value=&quot;提交&quot; id=&quot;sub&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var sub = document.getElementById(&quot;sub&quot;);</span><br><span class="line"></span><br><span class="line">    sub.onclick = function () &#123;</span><br><span class="line">      var name = document.getElementById(&quot;name&quot;).value;</span><br><span class="line">      var pwd = document.getElementById(&quot;pwd&quot;).value;</span><br><span class="line">      //创建XHR对象</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      //设置请求URL</span><br><span class="line">      var url = &quot;./ajax.php&quot;;</span><br><span class="line">      //设置XHR对象readyState变化时响应函数</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        //readyState是请求的状态，为4表示请求结束</span><br><span class="line">        if (xhr.readyState == 4) &#123;</span><br><span class="line">          //responseText服务器响应的内容</span><br><span class="line">          alert(&quot;服务器响应数据：&quot; + this.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //打开链接</span><br><span class="line">      xhr.open(&quot;post&quot;, url, true);</span><br><span class="line">      //设置请求头部</span><br><span class="line">      xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">      //发送请求</span><br><span class="line">      xhr.send(&quot;name=&quot; + name + &quot;&amp;pwd=&quot; + pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ajax.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name = !empty($_POST[&apos;name&apos;]) ? trim($_POST[&apos;name&apos;]) : &apos;没有数据&apos;;</span><br><span class="line">$pwd = !empty($_POST[&apos;pwd&apos;]) ? trim($_POST[&apos;pwd&apos;]) : &apos;没有数据&apos;;</span><br><span class="line">echo &apos;用户名：&apos;, $name, &apos;密码：&apos;, $pwd;</span><br></pre></td></tr></table></figure><h1 id="封装原生Ajax请求"><a href="#封装原生Ajax请求" class="headerlink" title="封装原生Ajax请求"></a>封装原生Ajax请求</h1><h2 id="封装get请求"><a href="#封装get请求" class="headerlink" title="封装get请求"></a>封装get请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *  &#123;String&#125; url  请求后台的地址</span><br><span class="line"> *  &#123;Function&#125; callback  请求成之后，返回数据成功，并且调用此方法，这个方法接受一个参数就是后台返回的数据。</span><br><span class="line"> *function ajaxPost(url, data, callback) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  xhr.open(&apos;POST&apos;, url, true);</span><br><span class="line">  xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class="line">  xhr.send(data);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">ajaxPost(&apos;/api/user&apos;, &apos;id=9&amp;com=aicoder&apos;, function (data) &#123;</span><br><span class="line">  // 后台返回的数据就是 字符串类型。要转成json，必须自己手动转换</span><br><span class="line">  var user = JSON.parse(data);</span><br><span class="line">  console.log(user.id);</span><br><span class="line">  console.log(user.com);</span><br><span class="line">&#125;);</span><br><span class="line"> @return undefined</span><br><span class="line"> */</span><br><span class="line">function ajaxGet(url, callback) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  xhr.open(&apos;GET&apos;, url, true);</span><br><span class="line">  xhr.send();</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">ajaxGet(&apos;/user.json&apos;, function (data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="封装post请求"><a href="#封装post请求" class="headerlink" title="封装post请求"></a>封装post请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function ajaxPost(url, data, callback) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  xhr.open(&apos;POST&apos;, url, true);</span><br><span class="line">  xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class="line">  xhr.send(data);</span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = function () &#123;</span><br><span class="line">    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">ajaxPost(&apos;/api/user&apos;, &apos;id=9&amp;com=aicoder&apos;, function (data) &#123;</span><br><span class="line">  // 后台返回的数据就是 字符串类型。要转成json，必须自己手动转换</span><br><span class="line">  var user = JSON.parse(data);</span><br><span class="line">  console.log(user.id);</span><br><span class="line">  console.log(user.com);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>所谓的同源，指的是协议，域名，端口相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不能读写对方的资源,如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://example.com    和     https://example.com 不同，因为协议不同 </span><br><span class="line"></span><br><span class="line">http://localhost:8080     和    http://localhost:1000 不同，因为端口不同 </span><br><span class="line"></span><br><span class="line">http://localhost:8080     和      https://example.com 不同，协议、域名、端口号都不同</span><br></pre></td></tr></table></figure><h1 id="跨域HTTP请求"><a href="#跨域HTTP请求" class="headerlink" title="跨域HTTP请求"></a>跨域HTTP请求</h1><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><p>当请求的资源的URL与当前页面的URL中的scheme、hostname、port有一个不同的时候就算是跨域操作。请参见上面的同源<br>因为有同源策略的限制，XMLHttpRequest仅可以发起操作同域(同源)下的请求。虽然这个限制关闭了安全漏洞但是也阻止了大量合法的适合使用的跨域请求。不过这种情况下也可以在页面中使用img、form、iframe等元素中使用跨域URL，最中在浏览器中显示这些数据。但是因为同源策略，浏览器不允许操作或者不能良好的显示跨域文档内容<br>如果此处使用XMLHttpRequest来操作跨域请求，那么所有的文档内容都将在responseText属性中暴露，所以同源策略不允许XMLHttpRequest进行跨域请求。<br>注意：img元素会把返回的内容强制转换为图片。iframe元素不允许操作跨域数据<br>但是需要强调的是script元素并未真正受到同源策略的限制，因为script有可能需要加载不同域的javascript资源。需要加载并执行任何来源的脚本。正因为如此，script的灵活性使其成为在跨域操作中代替XMLHttpRequest的主流Ajax传输协议：JSONP</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>script元素可以作为一种Ajax传输协议，只需设置script元素的src属性并且插入到DOM中，浏览器就会发出一个HTTP请求到src属性所指向的URL。使用script元素进行Ajax传输的一个主要原因就是因为它不受同源策略的影响。因此可以发送一个不同源的请求。而另外一个原因就是用script元素会自动解码并执行(浏览器会当做javascript来处理)下载的数据</p><blockquote><p>JSONP带来的安全性考虑：<br>为了使用script元素来进行Ajax传输，你必须允许web页面信任并执行目标服务器返回过来的任何数据。这意味这对于不信任的服务器，不应该采取该技术。在与信任的服务器交互是还要提防攻击者可能会进入服务器中。所以作为Ajax数据传输的script与可信的服务器交互，是相当危险的事情</p></blockquote><p>JSONP(JSON with Padding) 是一种跨域请求方式。主要原理是利用了script 标签可以跨域请求的特性，由其 src 属性发送请求到服务器，服务器返回 JavaScript 代码，浏览器接受响应，然后就直接执行了，这和通过 script 标签引用外部文件的原理是一样的<br>JSONP由两部分组成：回调函数和数据，回调函数一般是在浏览器控制，作为参数发往服务器端（当然，你也可以固定回调函数的名字，但客户端和服务器端的名称一定要一致）。当服务器响应时，服务器端就会把该函数和数据拼成字符串返回。<br>JSONP的请求过程：</p><ul><li>请求阶段：浏览器创建一个 script 标签，并给其src 赋值(类似 <a href="http://example.com/api/?callback=jsonpCallback）" target="_blank" rel="noopener">http://example.com/api/?callback=jsonpCallback）</a></li><li>发送请求：当给script的src赋值时，浏览器就会发起一个请求。</li><li>数据响应：服务端将要返回的数据作为参数和函数名称拼接在一起(格式类似”jsonpCallback({name:’abc’})”)返回。当浏览器接收到了响应数据，由于发起请求的是 script，所以相当于直接调用 jsonpCallback 方法，并且传入了一个参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//实现一个简单的JSONP请求</span><br><span class="line">//请求的url、包裹方法名称、回调函数</span><br><span class="line">function JSONP(url,callbackName,callback)&#123;</span><br><span class="line">    //为本次请求创建一个唯一的callback名称</span><br><span class="line">    var cbnum=&quot;cb&quot;+JSONP.count++; //计数器 生成一个唯一的名称</span><br><span class="line">    var cbname=&quot;JSONP.&quot;+cbnum; //作为JSONP方法的一个静态属性</span><br><span class="line"></span><br><span class="line">    if(url.indexOf(&quot;?&quot;)==-1)&#123;</span><br><span class="line">        url+=&quot;?&quot;+callbackName+&quot;=&quot;+cbname;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        url+=&quot;&amp;&quot;+callbackName+&quot;=&quot;+cbname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSONP[cbnum]=function(response)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            callback(response);</span><br><span class="line">        &#125;catch (ex)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            //执行完毕之后就删掉，因为没什么用了</span><br><span class="line">            delete JSONP[cbnum];</span><br><span class="line">            script.parentNode.removeChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var script=document.createElement(&quot;script&quot;);</span><br><span class="line">    script.src=url;</span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">//初始化用于创建唯一名称的计数器</span><br><span class="line">JSONP.count=0;</span><br><span class="line"></span><br><span class="line">//发起JSONP请求。</span><br><span class="line">JSONP(&quot;http://suggestion.baidu.com/su?wd=xxx&quot;,&quot;cb&quot;,function(data)&#123;</span><br><span class="line">    //将百度返回的数据输出到控制台中</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>注意：当多次执行同一个url的JSONP操作时需要注意缓存问题</p><h1 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h1><p>由于浏览器的同源策略，限制了XMLHttpRequest的跨域请求的操作。但是在XHR2中浏览器选择允许发送合适的CORS(cross-origin resource sharing，跨域资源共享)来跨域请求数据。在标准浏览器中依旧使用XMLHttpRequest对象，而在IE8－9中则使用XDomainRequest对象来请求跨域资源。<br>虽然实现CORS不需要做任何事情，但是还有一些安全细节需要了解。首先，如果通过XMLHttpRequest的open()方法传入用户名和密码(详情见open方法)，那么它们绝不会通过跨域请求发送。另外跨域请求也不会包含其他任何的用户证书：cookie和HTTP身份认证的令牌(TOKEN)通常不会作为请求的内容发送<br>到对方的服务器且对方服务器返回任何数据(cookie以及其他的一些响应头)都将被丢弃。如果跨域请求必须需要传入这几种用户证书才能成功，那么就必须在调用send()方法之前设置XMLHttpRequest的WithCredentials为true，此属性默认为false。也可以检索XMLHttpRequest对象有没有该属性来判断是否它支持CORS操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ajax简介&quot;&gt;&lt;a href=&quot;#Ajax简介&quot; class=&quot;headerlink&quot; title=&quot;Ajax简介&quot;&gt;&lt;/a&gt;Ajax简介&lt;/h1&gt;&lt;p&gt;AJAX=Asynchronous JavaScript and XML（异步的JavaScript和XML
      
    
    </summary>
    
    
      <category term="Ajax" scheme="https://geekes.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="https://geekes.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Vim入门指南</title>
    <link href="https://geekes.github.io/2020/02/17/vim%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://geekes.github.io/2020/02/17/vim入门指南/</id>
    <published>2020-02-17T12:26:12.000Z</published>
    <updated>2020-02-17T12:37:20.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h1><p>vim是从vi发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。<br>简单的来说,vi是老式的字处理器,不过功能已经很齐全了，vim 则可以说是程序开发者的一项很好用的工具。<br>连vim的官方网站 (<a href="http://www.vim.org" target="_blank" rel="noopener">http://www.vim.org</a>) 自己也说Vim 是一个程序开发工具而不是文字处理软件</p><h1 id="vim键盘图"><a href="#vim键盘图" class="headerlink" title="vim键盘图:"></a>vim键盘图:</h1><p><img src="/images/23.png" alt></p><h1 id="vi的基本概念"><a href="#vi的基本概念" class="headerlink" title="vi的基本概念"></a>vi的基本概念</h1><p>基本上vi可以分为三种状态,分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode）,各模式的功能区分如下:<br><img src="/images/26.jpg" alt></p><h1 id="命令行模式-command-mode）"><a href="#命令行模式-command-mode）" class="headerlink" title="命令行模式(command mode）"></a>命令行模式(command mode）</h1><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><h1 id="插入模式（Insert-mode）"><a href="#插入模式（Insert-mode）" class="headerlink" title="插入模式（Insert mode）"></a>插入模式（Insert mode）</h1><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><h1 id="底行模式（last-line-mode）"><a href="#底行模式（last-line-mode）" class="headerlink" title="底行模式（last line mode）"></a>底行模式（last line mode）</h1><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串等。<br>把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</p><h1 id="vi的基本操作"><a href="#vi的基本操作" class="headerlink" title="vi的基本操作"></a>vi的基本操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">进入vi</span><br><span class="line">在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：</span><br><span class="line">$ vi myfile</span><br><span class="line">进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」输入文字</span><br><span class="line">切换至插入模式（Insert mode）编辑文件</span><br><span class="line">在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」输入文字</span><br><span class="line">Insert 的切换</span><br><span class="line">处于「插入模式（Insert mode）」，用光标键往回移动，将该字删除，就要先按一下「ESC」键转到「命令行模式（command mode）」再删除文字。</span><br><span class="line">退出vi及保存文件</span><br><span class="line">在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如：</span><br><span class="line">: w filename （输入 「w filename」将文章以指定的文件名filename保存）</span><br><span class="line">: wq (输入「wq」，存盘并退出vi)</span><br><span class="line">: q! (输入q!， 不存盘强制退出vi)</span><br><span class="line">命令行模式（command mode）功能键 </span><br><span class="line">插入模式</span><br><span class="line">按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件；</span><br><span class="line">按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；</span><br><span class="line">按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</span><br><span class="line">从插入模式切换为命令行模式</span><br><span class="line">按「ESC」键。</span><br><span class="line">移动光标</span><br><span class="line">vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</span><br><span class="line">按「ctrl」+「b」：屏幕往“后”移动一页。</span><br><span class="line">按「ctrl」+「f」：屏幕往“前”移动一页。</span><br><span class="line">按「ctrl」+「u」：屏幕往“后”移动半页。</span><br><span class="line">按「ctrl」+「d」：屏幕往“前”移动半页。</span><br><span class="line">按数字「0」：移到文章的开头。</span><br><span class="line">按「G」：移动到文章的最后。</span><br><span class="line">按「$」：移动到光标所在行的“行尾”。</span><br><span class="line">按「^」：移动到光标所在行的“行首”</span><br><span class="line">按「w」：光标跳到下个字的开头</span><br><span class="line">按「e」：光标跳到下个字的字尾</span><br><span class="line">按「b」：光标回到上个字的开头</span><br><span class="line">按「#l」：光标移到该行的第#个位置，如：5l,56l。</span><br><span class="line">删除文字</span><br><span class="line">「x」：每按一次，删除光标所在位置的“后面”一个字符。</span><br><span class="line">「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。</span><br><span class="line">「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。</span><br><span class="line">「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。</span><br><span class="line">「dd」：删除光标所在行。</span><br><span class="line">「#dd」：从光标所在行开始删除#行</span><br><span class="line">复制</span><br><span class="line">「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</span><br><span class="line">「#yw」：复制#个字到缓冲区</span><br><span class="line">「yy」：复制光标所在行到缓冲区。</span><br><span class="line">「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。</span><br><span class="line">「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</span><br><span class="line">替换</span><br><span class="line">「r」：替换光标所在处的字符。</span><br><span class="line">「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</span><br><span class="line">恢复/撤消/还原上一次操作</span><br><span class="line">「u」：如果误执行一个命令，可以马上按下「u」，撤消上一个操作。按多次“u”可以执行多次撤消。</span><br><span class="line">更改</span><br><span class="line">「cw」：更改光标所在处的字到字尾处</span><br><span class="line">「c#w」：例如，「c3w」表示更改3个字</span><br><span class="line">跳至指定的行</span><br><span class="line">「ctrl」+「g」列出光标所在行的行号。</span><br><span class="line">「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</span><br><span class="line">Last line mode下命令简介 </span><br><span class="line"> 在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</span><br><span class="line">列出行号</span><br><span class="line">「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</span><br><span class="line">跳到文件中的某一行</span><br><span class="line">「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</span><br><span class="line">查找字符</span><br><span class="line">「/关键字」：先按「/」键，再输入你想寻找的字符，找的关键字不是你想要的，可以一直按「n」会往后寻找到您要的关键字为止。</span><br><span class="line">「?关键字」：先按「?」键，再输入你想寻找的字符，找的关键字不是你想要的，可以一直按「n」会往前寻找到您要的关键字为止。</span><br><span class="line">保存文件</span><br><span class="line">「w」：在冒号输入字母「w」就可以将文件保存起来。</span><br><span class="line">离开vi</span><br><span class="line">「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</span><br><span class="line">「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</span><br><span class="line">vi命令列表 </span><br><span class="line">下表列出命令模式下的一些键的功能：</span><br><span class="line">h </span><br><span class="line">左移光标一个字符</span><br><span class="line">l </span><br><span class="line">右移光标一个字符</span><br><span class="line">k </span><br><span class="line">光标上移一行</span><br><span class="line">j </span><br><span class="line">光标下移一行</span><br><span class="line">^ </span><br><span class="line">光标移动至行首</span><br><span class="line">0 </span><br><span class="line">数字“0”，光标移至文章的开头</span><br><span class="line">G </span><br><span class="line">光标移至文章的最后</span><br><span class="line">$ </span><br><span class="line">光标移动至行尾</span><br><span class="line">Ctrl+f </span><br><span class="line">向前翻屏</span><br><span class="line">Ctrl+b </span><br><span class="line">向后翻屏</span><br><span class="line">Ctrl+d </span><br><span class="line">向前翻半屏</span><br><span class="line">Ctrl+u </span><br><span class="line">向后翻半屏</span><br><span class="line">i </span><br><span class="line">在光标位置前插入字符</span><br><span class="line">a </span><br><span class="line">在光标所在位置的后一个字符开始增加</span><br><span class="line">o </span><br><span class="line">插入新的一行，从行首开始输入</span><br><span class="line">ESC </span><br><span class="line">从输入状态退至命令状态</span><br><span class="line">x </span><br><span class="line">删除光标后面的字符</span><br><span class="line">#x </span><br><span class="line">删除光标后的＃个字符</span><br><span class="line">X </span><br><span class="line">(大写X)，删除光标前面的字符</span><br><span class="line">#X </span><br><span class="line">删除光标前面的#个字符</span><br><span class="line">dd </span><br><span class="line">删除光标所在的行</span><br><span class="line">#dd </span><br><span class="line">删除从光标所在行数的#行</span><br><span class="line">yw </span><br><span class="line">复制光标所在位置的一个字</span><br><span class="line">#yw </span><br><span class="line">复制光标所在位置的#个字</span><br><span class="line">yy </span><br><span class="line">复制光标所在位置的一行</span><br><span class="line">#yy </span><br><span class="line">复制从光标所在行数的#行</span><br><span class="line">p </span><br><span class="line">粘贴</span><br><span class="line">u </span><br><span class="line">取消操作</span><br><span class="line">cw </span><br><span class="line">更改光标所在位置的一个字</span><br><span class="line">#cw </span><br><span class="line">更改光标所在位置的#个字</span><br><span class="line">下表列出行命令模式下的一些指令 </span><br><span class="line">w filename </span><br><span class="line">储存正在编辑的文件为filename</span><br><span class="line">wq filename </span><br><span class="line">储存正在编辑的文件为filename，并退出vi</span><br><span class="line">q! </span><br><span class="line">放弃所有修改，退出vi</span><br><span class="line">set nu </span><br><span class="line">显示行号</span><br><span class="line">/或? </span><br><span class="line">查找，在/后输入要查找的内容</span><br><span class="line">n </span><br><span class="line">与/或?一起使用查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-vim？&quot;&gt;&lt;a href=&quot;#什么是-vim？&quot; class=&quot;headerlink&quot; title=&quot;什么是 vim？&quot;&gt;&lt;/a&gt;什么是 vim？&lt;/h1&gt;&lt;p&gt;vim是从vi发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在
      
    
    </summary>
    
    
      <category term="vim" scheme="https://geekes.github.io/categories/vim/"/>
    
    
      <category term="vim" scheme="https://geekes.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>CSS3入门教程</title>
    <link href="https://geekes.github.io/2020/02/10/CSS3%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://geekes.github.io/2020/02/10/CSS3入门教程/</id>
    <published>2020-02-10T11:49:51.000Z</published>
    <updated>2020-02-12T17:23:13.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h1><h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">-webkit-transition-property: background-color;</span><br><span class="line">    -webkit-transition-duration: 1s;</span><br><span class="line">    -webkit-transition-timing-function: linear;</span><br><span class="line"></span><br><span class="line">    -moz-transition-timing-function: linear;</span><br><span class="line">    -moz-transition-duration: 1s;</span><br><span class="line">    -moz-transition-timing-function: linear;</span><br><span class="line"></span><br><span class="line">    -o-transition-timing-function: linear;</span><br><span class="line">    -o-transition-duration: 1s;</span><br><span class="line">    -o-transition-timing-function: linear;</span><br><span class="line">&#125;</span><br><span class="line">.demo:hover&#123;</span><br><span class="line">background-color: #00ffff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;过渡功能&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><h1 id="CSS3-Flex布局"><a href="#CSS3-Flex布局" class="headerlink" title="CSS3 Flex布局"></a>CSS3 Flex布局</h1><p>Flex英文为flexiable box,翻译为弹性盒子,Flex布局即弹性布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">/*水平方向，左端对齐*/</span><br><span class="line">flex-direction: row;</span><br><span class="line">/*水平方向，右端对齐*/</span><br><span class="line">    flex-direction: row-reverse;</span><br><span class="line">    /*垂直方向，顶部对齐*/</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    /*垂直方向，底部对齐*/</span><br><span class="line">    flex-direction: column-reverse;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">/*换行*/</span><br><span class="line">flex-wrap:nowrap;</span><br><span class="line">/*不换行,默认*/</span><br><span class="line">    flex-wrap:wrap;</span><br><span class="line">    /*换行,第一行在下方*/</span><br><span class="line">    flex-wrap:wrap-reverse;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">  /*默认，项目左对齐*/</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    /*项目右对齐*/</span><br><span class="line">    justify-content: flex-end;</span><br><span class="line">    /*项目居中对齐*/</span><br><span class="line">    justify-content: center;</span><br><span class="line">    /*项目两端对齐*/</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    /*每个项目两侧的间隔相等*/</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">  /*纵轴的顶部对齐*/</span><br><span class="line">    align-items: flex-start;</span><br><span class="line">    /*纵轴的底部对齐*/</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">    /*纵轴的中点对齐*/</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*项目的第一行文字的基线对齐*/</span><br><span class="line">    align-items: baseline;</span><br><span class="line">    /*默认对齐方式，如果项目未设置高度或设为auto，将占满整个容器的高度*/</span><br><span class="line">    align-items: stretch;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.item:nth-of-type(2n)&#123;</span><br><span class="line">height: 50px;</span><br><span class="line">padding-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试5&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试6&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试7&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">display: flex;</span><br><span class="line">display:-webkit-flex;</span><br><span class="line">  /*纵轴的顶部对齐*/</span><br><span class="line">    align-items: flex-start;</span><br><span class="line">    /*纵轴的底部对齐*/</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">    /*纵轴的中点对齐*/</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*项目的第一行文字的基线对齐*/</span><br><span class="line">    align-items: baseline;</span><br><span class="line">    /*默认对齐方式，如果项目未设置高度或设为auto，将占满整个容器的高度*/</span><br><span class="line">    align-items: stretch;</span><br><span class="line">background: #666;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line"> margin:  10px 10px;</span><br><span class="line"> padding: 10px;</span><br><span class="line"> background: #ff0;</span><br><span class="line"> width: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试1&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试2&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试3&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试4&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试5&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试6&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;item&quot;&gt;测试7&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS3-Grid布局"><a href="#CSS3-Grid布局" class="headerlink" title="CSS3 Grid布局"></a>CSS3 Grid布局</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS3-动画&quot;&gt;&lt;a href=&quot;#CSS3-动画&quot; class=&quot;headerlink&quot; title=&quot;CSS3 动画&quot;&gt;&lt;/a&gt;CSS3 动画&lt;/h1&gt;&lt;h2 id=&quot;Transition&quot;&gt;&lt;a href=&quot;#Transition&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="CSS3" scheme="https://geekes.github.io/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="https://geekes.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门教程-选项</title>
    <link href="https://geekes.github.io/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E9%80%89%E9%A1%B9/"/>
    <id>https://geekes.github.io/2020/02/01/Vue入门教程-选项/</id>
    <published>2020-02-01T10:52:11.000Z</published>
    <updated>2020-02-01T10:52:11.263Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue入门教程-内置组件</title>
    <link href="https://geekes.github.io/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/"/>
    <id>https://geekes.github.io/2020/02/01/Vue入门教程-内置组件/</id>
    <published>2020-02-01T10:50:38.000Z</published>
    <updated>2020-02-01T10:50:38.555Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue入门教程-全局API</title>
    <link href="https://geekes.github.io/2020/02/01/Vue%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%85%A8%E5%B1%80API/"/>
    <id>https://geekes.github.io/2020/02/01/Vue入门教程-全局API/</id>
    <published>2020-02-01T10:47:10.000Z</published>
    <updated>2020-02-03T15:28:29.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-directive自定义指令"><a href="#Vue-directive自定义指令" class="headerlink" title="Vue.directive自定义指令"></a>Vue.directive自定义指令</h1><h1 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend"></a>Vue.extend</h1><h1 id="Vue-set全局操作"><a href="#Vue-set全局操作" class="headerlink" title="Vue.set全局操作"></a>Vue.set全局操作</h1><h1 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use"></a>Vue.use</h1><h1 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h1><p>下图展示了实例的生命周期<br><img src="/images/15.png" alt><br>Vue实例有一个完整的生命周期,从开始创建、初始化数据、挂载虚拟dom、渲染→更新→销毁等一系列过程,这是Vue的生命周期，<br>Vue实例从 创建到销毁的过程,就是生命周期<br>每个组件都会经历一个完整的生命周期,分为三个阶段:初始化、运行中、销毁<br>1.组件通过new Vue()创建出来之后会初始化事件和生命周期,执行beforeCreate钩子函数,数据还没挂载,无法访问到数据,一般不做操作<br>2.挂载数据、捆绑事件等，执行created函数,使用到数据或者更改数据,不会触发updated函数,渲染前倒数第二次更改数据,不会触发其他的钩子函数,一般做初始数据的获取<br>3.编译模板把虚拟dom放入到render函数中渲染，执行beforeMount钩子函数，虚拟dom已经创建完成，可以更改数据，不会触发updated，渲染前更改数据的机会，不会触发其他的钩子函数，一般做初始数据的获取<br>4.开始render，渲染虚拟dom，执行mounted钩子函数，组件已经出现在页面中，数据、dom都已经处理好了,事件都已经挂载好了，可以操作虚拟dom<br>5.当组件或虚拟dom的数据更改之后，会立即执行beforeUpdate，然后vue的dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染<br>6.当更新完成后，执行updated，数据已经更改完成，虚拟dom也重新render完成，可以操作更新后的虚拟dom<br>7.当经过某种途径调用$destroy方法后，立即执行beforeDestroy，一般在这里做一些其他事件，例如清除计时器、清除非指令绑定的事件等<br>8.组件的数据绑定、监听…去掉后只剩下虚拟dom空壳,执行destroyed，一般在这里做一些其他事件<br><img src="/images/16.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;test&gt;&lt;/test&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;p class=&quot;list&quot;&gt;组件&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;destroy&quot;&gt;destroy&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;test&quot;&gt;</span><br><span class="line">    &lt;p&gt;test:&#123;&#123;test&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&quot;test&quot;,&#123;</span><br><span class="line">        template:&quot;#test&quot;,</span><br><span class="line">        data:function()&#123;</span><br><span class="line">            return &#123;test:&apos;hello vue&apos;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        timer:null,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            destroy:function()&#123;</span><br><span class="line">                this.$destroy()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate:function()&#123;</span><br><span class="line">            console.log(&apos;new vue() 数据没挂载&apos;)</span><br><span class="line">            console.log(this.test)</span><br><span class="line">            console.log(document.getElementsByClassName(&quot;test&quot;)[0])</span><br><span class="line">        &#125;,</span><br><span class="line">        created:function()&#123;</span><br><span class="line">            console.log(&quot;created已经可以使用数据,更改数据不会触发update函数&quot;)</span><br><span class="line">            this.test+=&apos;——&apos;</span><br><span class="line">            console.log(&apos;渲染倒数第二次更改数据,不触发其他的钩子函数，做初始化数据的获取&apos;)</span><br><span class="line">            console.log(&apos;编译模板将虚拟dom放入rende函数中准备渲染&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount:function()&#123;</span><br><span class="line">                console.log(&apos;beforeMount:虚拟dom创建完成,更改数据不会触发update&apos;)</span><br><span class="line">                this.test+=&apos;极客教程&apos;</span><br><span class="line">                console.log(document.getElementsByClassName(&quot;test&quot;)[0])</span><br><span class="line">                console.log(&apos;开始render，渲染虚拟dom&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted:function()&#123;</span><br><span class="line">                console.log(&apos;组件出现在页面,数据、虚拟dom处理完毕,事件完成挂载&apos;)</span><br><span class="line">                console.log(document.getElementsByClassName(&quot;test&quot;)[0])</span><br><span class="line">                console.log(&apos;操作虚拟dom&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate:function()&#123;</span><br><span class="line">            //这里不能更改数据,否则陷入死循环</span><br><span class="line">            console.log(&apos;beforeUpdate:重新渲染之前触发&apos;)</span><br><span class="line">            console.log(&apos;vue的虚拟dom机制重新构建虚拟dom与上次的虚拟dom利用diff算法进行对比之后重新渲染&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated:function()&#123;</span><br><span class="line">            //这里不能更改数据,否则陷入死循环</span><br><span class="line">            console.log(&apos;updated:数据更改,重新render完成&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy:function()&#123;</span><br><span class="line">            console.log(&apos;beforeDestroy:销毁前执行($test方法被调用的时候会执行),清除计时器、清除非指令绑定的事件等&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed:function()&#123;</span><br><span class="line">            console.log(&apos;destroyed:组件的数据绑定、监听&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    &#125;).$mount(&apos;#app&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">生命周期钩子    详细</span><br><span class="line">beforeCreate    在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用</span><br><span class="line">created    实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见</span><br><span class="line">beforeMount    在挂载开始之前被调用：相关的 render 函数首次被调用</span><br><span class="line">mounted    el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内</span><br><span class="line">beforeUpdate    数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程</span><br><span class="line">updated    由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作</span><br><span class="line">activated    keep-alive 组件激活时调用</span><br><span class="line">deactivated    keep-alive 组件停用时调用</span><br><span class="line">beforeDestroy    实例销毁之前调用。在这一步，实例仍然完全可用</span><br><span class="line">destroyed    Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</span><br></pre></td></tr></table></figure><h1 id="Template-制作模版"><a href="#Template-制作模版" class="headerlink" title="Template 制作模版"></a>Template 制作模版</h1><h1 id="Component-组件"><a href="#Component-组件" class="headerlink" title="Component 组件"></a>Component 组件</h1><h1 id="Component-组件props-属性设置"><a href="#Component-组件props-属性设置" class="headerlink" title="Component 组件props 属性设置"></a>Component 组件props 属性设置</h1><h1 id="Component-父子组件关系"><a href="#Component-父子组件关系" class="headerlink" title="Component 父子组件关系"></a>Component 父子组件关系</h1><h1 id="Component-标签"><a href="#Component-标签" class="headerlink" title="Component 标签"></a>Component 标签</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-directive自定义指令&quot;&gt;&lt;a href=&quot;#Vue-directive自定义指令&quot; class=&quot;headerlink&quot; title=&quot;Vue.directive自定义指令&quot;&gt;&lt;/a&gt;Vue.directive自定义指令&lt;/h1&gt;&lt;h1 id=&quot;V
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://geekes.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://geekes.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6入门</title>
    <link href="https://geekes.github.io/2020/01/23/ES6%E5%85%A5%E9%97%A8/"/>
    <id>https://geekes.github.io/2020/01/23/ES6入门/</id>
    <published>2020-01-23T14:26:52.000Z</published>
    <updated>2020-02-29T17:01:02.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h1><p>ES6,全称ECMAScript 6.0,是JavaScript的下一个版本标准,2015.06发版<br>ES6主要是为了解决ES5的先天不足,比如JavaScript里并没有类的概念<br>但是目前浏览器的JavaScript是ES5版本,大多数高版本的浏览器也支持ES6,不过只实现了ES6的部分特性和功能,对ES6 的支持可以查看kangax.github.io/es5-compat-table/es6/<br>JavaScript的正式名称是ECMAScript<br>1996年11月,JavaScript的创造者网景公司将JS提交给国际化标准组织ECMA(European computer manufactures association,洲计算机制造联合会）<br>希望这种语言能够成为国际标准,随后ECMA发布了规定浏览器脚本语言的标准,即ECMAScript。这也有利于这门语言的开放和中立</p><h1 id="ES5存在的问题"><a href="#ES5存在的问题" class="headerlink" title="ES5存在的问题"></a>ES5存在的问题</h1><ul><li>作用域</li><li>异步函数</li><li>原型</li><li>构造函数</li><li>继承</li><li>ES6的语法糖</li></ul><h1 id="在线转换"><a href="#在线转换" class="headerlink" title="在线转换"></a>在线转换</h1><h2 id="Babel-https-babeljs-io-repl-是一个广泛使用的ES6转码器-可以将ES6代码转为ES5代码"><a href="#Babel-https-babeljs-io-repl-是一个广泛使用的ES6转码器-可以将ES6代码转为ES5代码" class="headerlink" title="Babel(https://babeljs.io/repl/) 是一个广泛使用的ES6转码器,可以将ES6代码转为ES5代码"></a>Babel(<a href="https://babeljs.io/repl/" target="_blank" rel="noopener">https://babeljs.io/repl/</a>) 是一个广泛使用的ES6转码器,可以将ES6代码转为ES5代码</h2><p>从而在现有环境中执行。解决现在环境不支持ES6的问题</p><h2 id="Traceur转码器"><a href="#Traceur转码器" class="headerlink" title="Traceur转码器"></a>Traceur转码器</h2><p>Google提供了一款ES6转码器<br><a href="http://google.github.io/traceur-compiler/demo/repl.html" target="_blank" rel="noopener">http://google.github.io/traceur-compiler/demo/repl.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.map(item =&gt; item + 1);  // 转码前</span><br><span class="line">// 转码后</span><br><span class="line">input.map(function (item)&#123;</span><br><span class="line">   return item +１;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="配置Babel初始化项目"><a href="#配置Babel初始化项目" class="headerlink" title="配置Babel初始化项目"></a>配置Babel初始化项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init (-y)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;es6&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;babel src/index.js -o dist/index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ES6环境搭建"><a href="#ES6环境搭建" class="headerlink" title="ES6环境搭建"></a>ES6环境搭建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><h2 id="安装babel-preset-es2015和babel-cli"><a href="#安装babel-preset-es2015和babel-cli" class="headerlink" title="安装babel-preset-es2015和babel-cli"></a>安装babel-preset-es2015和babel-cli</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure><h2 id="在项目的根目录添加一个-babelrc文件-并添加内容"><a href="#在项目的根目录添加一个-babelrc文件-并添加内容" class="headerlink" title="在项目的根目录添加一个.babelrc文件,并添加内容"></a>在项目的根目录添加一个.babelrc文件,并添加内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[</span><br><span class="line">        &quot;es2015&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// es2015转码规则</span><br><span class="line">npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line">// react转码规则</span><br><span class="line">npm install --save-dev babel-preset-react</span><br><span class="line">//react最新转码规则</span><br><span class="line">npm install --save-dev babel-preset-latest</span><br><span class="line"></span><br><span class="line">//ES7不同阶段语法提案的转码规则（共有4个阶段）,选装一个</span><br><span class="line">npm install --save-dev babel-preset-stage-0</span><br><span class="line">npm install --save-dev babel-preset-stage-1</span><br><span class="line">npm install --save-dev babel-preset-stage-2</span><br><span class="line">npm install --save-dev babel-preset-stage-3</span><br><span class="line"></span><br><span class="line">//安装 babel-cli 工具，用于命令行转码</span><br><span class="line">npm install --global babel-cli</span><br><span class="line"></span><br><span class="line">//执行转码 </span><br><span class="line">babel example.js -o compile.js --presets es2015</span><br><span class="line"></span><br><span class="line">//实时监听编译文件</span><br><span class="line">$ babel example.js --watch -o compiled.js --presets es2015</span><br><span class="line"></span><br><span class="line">//Babel-core </span><br><span class="line">需要调用BABEL的API进行转码，就需要使用babel-core模块</span><br><span class="line"></span><br><span class="line">//babel-poly </span><br><span class="line">babel默认只转换新的JS语法,不转换新的API,比如Iterator ,Generator,Set ,Maps,Proxy,Reflect,Symbol,Promise 等全局对象,以及定义在全局对象的方法(比如Object.assign)</span><br><span class="line"></span><br><span class="line">浏览器环境以script标签方式引入的方式引入 ,会造成而性能下降,生产环境需要加载已经转码的脚本</span><br></pre></td></tr></table></figure><h2 id="测试编译效果"><a href="#测试编译效果" class="headerlink" title="测试编译效果"></a>测试编译效果</h2><p>新建一个index.js文件,写入包含ES6语法的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src -d release</span><br></pre></td></tr></table></figure><h2 id="可以在package-json的srcipts中新增一行代码-然后通过npm来运行命令"><a href="#可以在package-json的srcipts中新增一行代码-然后通过npm来运行命令" class="headerlink" title="可以在package.json的srcipts中新增一行代码,然后通过npm来运行命令"></a>可以在package.json的srcipts中新增一行代码,然后通过npm来运行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;:&quot;babel src -d release&quot;</span><br><span class="line">npm run build,也相当于执行命令：babel src -d release</span><br></pre></td></tr></table></figure><h2 id="运行成功会自动创建release文件夹-并生成对应的index-js文件"><a href="#运行成功会自动创建release文件夹-并生成对应的index-js文件" class="headerlink" title="运行成功会自动创建release文件夹,并生成对应的index.js文件"></a>运行成功会自动创建release文件夹,并生成对应的index.js文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 转码前</span><br><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age,sex)&#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.sex = sex</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        console.log(`name$&#123;this.name&#125;,age $&#123;this.age&#125;，sex $&#123;this.sex&#125;. `)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let li = new Person(&apos;张三&apos;,16,男)</span><br><span class="line">li.speak()</span><br><span class="line"></span><br><span class="line">// 转码后</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function _instanceof(left, right) &#123; if (right != null &amp;&amp; typeof Symbol !== &quot;undefined&quot; &amp;&amp; right[Symbol.hasInstance]) &#123; return right[Symbol.hasInstance](left); &#125; else &#123; return left instanceof right; &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123; if (!_instanceof(instance, Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _createClass(Constructor, protoProps, staticProps) &#123; if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; &#125;</span><br><span class="line"></span><br><span class="line">var Person =</span><br><span class="line">/*#__PURE__*/</span><br><span class="line">function () &#123;</span><br><span class="line">  function Person(name, age, sex) &#123;</span><br><span class="line">    _classCallCheck(this, Person);</span><br><span class="line"></span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _createClass(Person, [&#123;</span><br><span class="line">    key: &quot;speak&quot;,</span><br><span class="line">    value: function speak() &#123;</span><br><span class="line">      console.log(&quot;name&quot;.concat(this.name, &quot;,age &quot;).concat(this.age, &quot;\uFF0Csex &quot;).concat(this.sex, &quot;. &quot;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  return Person;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">var li = new Person(&apos;张三&apos;, 16, 男);</span><br><span class="line">li.speak();</span><br></pre></td></tr></table></figure><p>Babel-cli官方文档：<a href="https://www.babeljs.cn/docs/usage/cli/" target="_blank" rel="noopener">https://www.babeljs.cn/docs/usage/cli/</a></p><h2 id="可以通过命令进行转换-ES6转化为ES5的语法"><a href="#可以通过命令进行转换-ES6转化为ES5的语法" class="headerlink" title="可以通过命令进行转换,ES6转化为ES5的语法"></a>可以通过命令进行转换,ES6转化为ES5的语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure><h2 id="打开package-json文件-修改文件内容"><a href="#打开package-json文件-修改文件内容" class="headerlink" title="打开package.json文件,修改文件内容"></a>打开package.json文件,修改文件内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;es6&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel src/index.js -o dist/index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改完成-可以使用npm-run-build-利用webpack进行打包"><a href="#修改完成-可以使用npm-run-build-利用webpack进行打包" class="headerlink" title="修改完成,可以使用npm run build 利用webpack进行打包"></a>修改完成,可以使用npm run build 利用webpack进行打包</h2><h1 id="ES6大纲"><a href="#ES6大纲" class="headerlink" title="ES6大纲"></a>ES6大纲</h1><p><img src="/images/41.png" alt></p><h1 id="var-amp-let-amp-const-命令"><a href="#var-amp-let-amp-const-命令" class="headerlink" title="var &amp; let &amp; const 命令"></a>var &amp; let &amp; const 命令</h1><h2 id="var：它是variable的简写-可以理解成变量的意思"><a href="#var：它是variable的简写-可以理解成变量的意思" class="headerlink" title="var：它是variable的简写,可以理解成变量的意思"></a>var：它是variable的简写,可以理解成变量的意思</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>箭头函数<br>Symbol<br>Proxy<br>Reflect<br>扩展运算符<br>Promise对象<br>Set和WeakSet<br>class类<br>迭代器（Iterators）<br>Generators</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6简介&quot;&gt;&lt;a href=&quot;#ES6简介&quot; class=&quot;headerlink&quot; title=&quot;ES6简介&quot;&gt;&lt;/a&gt;ES6简介&lt;/h1&gt;&lt;p&gt;ES6,全称ECMAScript 6.0,是JavaScript的下一个版本标准,2015.06发版&lt;br&gt;ES6主
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://geekes.github.io/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://geekes.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli入门</title>
    <link href="https://geekes.github.io/2020/01/23/Vue-cli%E5%85%A5%E9%97%A8/"/>
    <id>https://geekes.github.io/2020/01/23/Vue-cli入门/</id>
    <published>2020-01-23T14:23:21.000Z</published>
    <updated>2020-02-03T13:49:49.978Z</updated>
    
    <content type="html"><![CDATA[<p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果已经全局安装了旧版本的 vue-cli(1.x 或 2.x)，需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它</p><p>可以在命令行中访问 vue 命令来验证它是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><p>用这个命令来检查其版本是否正确 (3.x)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><p>查看其他命令可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vue -h</span><br><span class="line">Usage: vue &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                              output the version number</span><br><span class="line">  -h, --help                                 output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service  // 创建一个由vue-cli-service 支持的新项目</span><br><span class="line">  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator in an already created project   // 在已有的项目中添加插件</span><br><span class="line">  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin in an already created project // 在开发者模式下零配置运行一个js或vue文件</span><br><span class="line">  inspect [options] [paths...]               inspect the webpack config in a project with vue-cli-service   // 在vue-cli-service的项目中检查webpack配置 </span><br><span class="line">  serve [options] [entry]                    serve a .js or .vue file in development mode with zero config  // 可以理解为开发环境下启动命令</span><br><span class="line">  build [options] [entry]                    build a .js or .vue file in production mode with zero config   // 打包 （在生产模式下零配置构建一个js或者vue文件）</span><br><span class="line">  ui [options]                               start and open the vue-cli ui  // vue3.0提供的一个UI </span><br><span class="line">  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires @vue/cli-init)  // // 旧api 需要@vue/cli-init // 就是原来的vue-cli init &lt;template&gt; &lt;app-name&gt;</span><br><span class="line">  config [options] [value]                   inspect and modify the config // 项目配置文件</span><br><span class="line">  upgrade [semverLevel]                      upgrade vue cli service / plugins (default semverLevel: minor) // 更新插件或者配置文件</span><br><span class="line">  info                                       print debugging information about your environment  // 打印出来vue配置文件</span><br><span class="line"></span><br><span class="line">  Run vue &lt;command&gt; --help for detailed usage of given command.</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>创建一个项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名称(必须小写)</span><br><span class="line"># OR vue ui</span><br></pre></td></tr></table></figure><p>两种选择方式，第一种是默认的(一路回车)，第二种手动配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; default (babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>手动配置(选择需要的模块，上下移动，空格进行确定)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Babel  //es6转换器</span><br><span class="line"> ( ) TypeScript //使用js的超类语言TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support //PWA单页应用 </span><br><span class="line"> ( ) Router  //使用路由</span><br><span class="line"> ( ) Vuex  //使用vue状态管理器</span><br><span class="line"> ( ) CSS Pre-processors //css预处理,如less,sass等</span><br><span class="line"> (*) Linter / Formatter //Eslint安装</span><br><span class="line"> ( ) Unit Testing //Unit单元测试</span><br><span class="line"> ( ) E2E Testing //E2E单元测试</span><br></pre></td></tr></table></figure><p>选择需要的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project:</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line"> (*) Vuex</span><br><span class="line">&gt;(*) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure><p>模块安装询问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)</span><br></pre></td></tr></table></figure><p>选择Y接下步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes //是否使用history模式,这里选的是Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less //选择css预处理器,这里选的Less</span><br><span class="line">? Pick a linter / formatter config: Prettier //选择Linter / Formatter规范类型</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Lint on save // 保存并且检测 (一般选择这个)</span><br><span class="line"> ( ) Lint and fix on commit // fix和commit检查</span><br></pre></td></tr></table></figure><p>选择了router，Less，ESlint—Prettier作为代码检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files  // 独立文件夹</span><br><span class="line">  In package.json  // 放入package.json里 (一般选择这个)</span><br></pre></td></tr></table></figure><p>babel .eslint这些文件放在独立的文件里还是package.json里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.3.0</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json</span><br><span class="line">? Save this as a preset for future projects? (y/N) N </span><br><span class="line">//是否记录下，以便下次继续使用这套配置</span><br></pre></td></tr></table></figure><p>选择N不记录<br>安装后移动到目录并启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名称  // 进入项目目录 </span><br><span class="line">npm run serve  //运行项目</span><br></pre></td></tr></table></figure><p><img src="/images/19.png" alt><br>查看下目录结构<br><img src="/images/20.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">|-- node_modules                 # 依赖包的文件夹</span><br><span class="line">|-- dist                         # 打包后文件夹            </span><br><span class="line">|-- public                       # 静态文件夹                                   </span><br><span class="line">|   |-- favicon.ico              # 图标  </span><br><span class="line">|   |-- index.html               # 入口页面</span><br><span class="line">|-- src                          # 资源目录         </span><br><span class="line">|   |--assets                    # 模块资源</span><br><span class="line">|   |--components                # vue公共组件</span><br><span class="line">|   |--views                     #页面目录文件</span><br><span class="line">|   |--App.vue                   # 页面入口文件</span><br><span class="line">|   |--main.js                   # 入口文件,加载公共组件</span><br><span class="line">|   |--router.js                 # 路由配置</span><br><span class="line">|   |--store.js                  # 状态管理</span><br><span class="line">|-- vue.config.js                # 配置文件</span><br><span class="line">|-- .gitignore                   # git忽略上传的文件格式</span><br><span class="line">|-- babel.config.js              # babel语法编译</span><br><span class="line">|-- package.json                 # 项目基本信息</span><br><span class="line">|--package-lock.json             # 依赖版本锁定文件</span><br><span class="line">|--README.md                     # README文件</span><br></pre></td></tr></table></figure><p>在两种情况下会去安装依赖：<br>（1）项目运行缺少该依赖包：例如项目加载外部css会用到的css-loader，路由跳转vue-loader等（安装方法示例：npm install css-loader）<br>（2）安装插件：如vux（基于WEUI的移动端组件库），vue-swiper（轮播插件）<br>注：有时会安装指定依赖版本，需在依赖包名称后加上版本号信息，如安装11.1.4版本的vue-loader，输入npm install <a href="mailto:vue-loader@11.1.4" target="_blank" rel="noopener">vue-loader@11.1.4</a><br>main.js——(入口文件)<br>main.js主要是引入vue框架，根组件及路由设置，并且定义vue实例<br><img src="/images/21.jpg" alt><br>index.html——(主页)<br>index.html如其他html一样，一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充<img src="/images/22.jpg" alt><br>App.vue——(根组件)<br>一个vue页面通常由三部分组成:模板(template)、js(script)、样式(style)<img src="/images/23.jpg" alt><br>router——(路由配置)<br>router.js，即为路由配置文件<br>router下的index.js<br>定义了路径为’/‘的路由，该路由对应的页面是HelloWorld组件，所以当我们在浏览器url访问<a href="http://localhost:8080/#/" target="_blank" rel="noopener">http://localhost:8080/#/</a> 时就渲染的HelloWorld组件<br>可以设置多个路由，’/index’,’/list’之类的，首先得引入该组件，再为该组件设置路由<img src="/images/24.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果已经全局安装了旧版本的 vue-cli(1.x 或 2.x)，需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Vue" scheme="https://geekes.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://geekes.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-router入门</title>
    <link href="https://geekes.github.io/2020/01/23/Vue-router%E5%85%A5%E9%97%A8/"/>
    <id>https://geekes.github.io/2020/01/23/Vue-router入门/</id>
    <published>2020-01-23T14:20:48.000Z</published>
    <updated>2020-01-24T14:51:24.929Z</updated>
    
    <content type="html"><![CDATA[<p>Vue Router是Vue.js官方的路由管理器。Vue Router和Vue.js 的核心深度集成,让构建单页面应用变得易如反掌。包含的功能有:</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue Router是Vue.js官方的路由管理器。Vue Router和Vue.js 的核心深度集成,让构建单页面应用变得易如反掌。包含的功能有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌套的路由/视图表&lt;/li&gt;
&lt;li&gt;模块化的、基于组件的路由配置&lt;/li&gt;
&lt;li&gt;路由参数、查
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://geekes.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://geekes.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Borland传奇</title>
    <link href="https://geekes.github.io/2020/01/19/Borland%E4%BC%A0%E5%A5%87/"/>
    <id>https://geekes.github.io/2020/01/19/Borland传奇/</id>
    <published>2020-01-19T14:32:35.000Z</published>
    <updated>2020-01-19T14:34:28.674Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Java前世今生</title>
    <link href="https://geekes.github.io/2020/01/19/Java%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>https://geekes.github.io/2020/01/19/Java前世今生/</id>
    <published>2020-01-19T14:31:03.000Z</published>
    <updated>2020-01-19T14:34:38.867Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Blogger前世今生</title>
    <link href="https://geekes.github.io/2020/01/19/Blogger%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>https://geekes.github.io/2020/01/19/Blogger前世今生/</id>
    <published>2020-01-19T14:29:15.000Z</published>
    <updated>2020-02-19T14:24:40.283Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>一个失败的操作系统MULTICS</title>
    <link href="https://geekes.github.io/2020/01/19/%E4%B8%80%E4%B8%AA%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FMULTICS/"/>
    <id>https://geekes.github.io/2020/01/19/一个失败的操作系统MULTICS/</id>
    <published>2020-01-19T14:25:30.000Z</published>
    <updated>2020-02-05T13:50:03.036Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>一家伟大公司之死</title>
    <link href="https://geekes.github.io/2020/01/19/%E4%B8%80%E5%AE%B6%E4%BC%9F%E5%A4%A7%E5%85%AC%E5%8F%B8%E4%B9%8B%E6%AD%BB/"/>
    <id>https://geekes.github.io/2020/01/19/一家伟大公司之死/</id>
    <published>2020-01-19T13:43:18.000Z</published>
    <updated>2020-01-19T14:12:44.783Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
    
      <category term="软件编年史" scheme="https://geekes.github.io/tags/%E8%BD%AF%E4%BB%B6%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>React教程-入门和组件</title>
    <link href="https://geekes.github.io/2020/01/13/React%E6%95%99%E7%A8%8B-%E5%85%A5%E9%97%A8%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
    <id>https://geekes.github.io/2020/01/13/React教程-入门和组件/</id>
    <published>2020-01-13T09:21:17.000Z</published>
    <updated>2020-02-06T16:54:41.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h1><p>React起源于facebook公司,起初用于Instagram网站开发,React是一个用于构建用户界面的javascript类库,不是一个MVC框架,提出了一种新的开发模式与理念,它强调的是”用户界面”。<br>React官方地址:<a href="https://reactjs.org" target="_blank" rel="noopener">https://reactjs.org</a><br>GitHub地址:<a href="https://github.com/facebook/react" target="_blank" rel="noopener">https://github.com/facebook/react</a><br>阅读本教程前需要了解的知识：<br>在开始学习React之前,需要具备以下基础知识:<br>HTML+CSS 需要会基本的html和css知识,学习起来更加容易上手。<br>JavaScript 需要扎实的JS能力,React的组件都会使用JS编写,JS基础越好,学习起来越来越容易。</p><h1 id="React特点"><a href="#React特点" class="headerlink" title="React特点:"></a>React特点:</h1><p>虚拟DOM:虚拟DOM顾名思义不是真实的DOM,它不需要浏览器的DOM API支持。虚拟DOM是在DOM的基础上建立一个抽象层,其实质是一个JavaScript对象,当数据和状态发生了变化，都会被自动高效的同步到虚拟DOM中,最后再将仅变化的部分同步到DOM中<br>组件化:组件是React的核心,一个完整的React应用是由若干个组件搭建起来的，每个组件有自己的数据和方法，组件具体如何划分，需要根据不同的项目来确定<br>单项数据流:react是单向数据流,父组件传递给子组件的数据,子组件能够使用,子组件要传值给父组件,或者要修改父组件的代码,都是要通过父组件传递过来的方法去实现</p><h1 id="官方提供的CDN地址："><a href="#官方提供的CDN地址：" class="headerlink" title="官方提供的CDN地址："></a>官方提供的CDN地址：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>react.min.js:实现React核心逻辑<br>react-dom.min.js:包含了具体的DOM渲染更新逻辑,以及服务端渲染的逻辑<br>babel.min.js:Babel可以将ES6代码转为ES5代码,Babel内嵌了对JSX的支持</p><h1 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h1><p>JSX是JavaScript XML语法扩展,使用XML标记来创建虚拟DOM和声明组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class="line">    document.getElementById(&apos;demo&apos;)</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><p>ReactDOM.render是React的最基本方法,用于将模板转换为HTML语言,并插入指定的DOM节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用JSX,则&lt;script&gt;标签的type属性需要设置为text/babel</span><br></pre></td></tr></table></figure><p>JSX的优点</p><ul><li>可以使JavaScript XML仿照HTML来定义虚拟DOM</li><li>JSX是支持嵌入JavaScript表达式,JavaScript表达式写在花括号{}中</li><li>JSX防止注入攻击</li><li>程序代码更加简洁直观</li></ul><p>##把上边的程序改写成带JavaScript表达式的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">const name = &apos;world!&apos;;</span><br><span class="line">const element = &lt;h1&gt;Hello, &#123;name&#125;&lt;/h1&gt;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById(&apos;demo&apos;)</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="注意的是表达式不支持if…else这样的语句-但是支持三元运算符和二元运算符"><a href="#注意的是表达式不支持if…else这样的语句-但是支持三元运算符和二元运算符" class="headerlink" title="注意的是表达式不支持if…else这样的语句,但是支持三元运算符和二元运算符"></a>注意的是表达式不支持if…else这样的语句,但是支持三元运算符和二元运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  const i = 1;</span><br><span class="line">      ReactDOM.render(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;i == 1 ? &apos;True&apos; : &apos;False&apos;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        ,</span><br><span class="line">        document.getElementById(&apos;demo&apos;)</span><br><span class="line">      );</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="使用了ES6的语法map来进行进行循环-循环时需要注意的是-新版本的React需要使用键-如果没有键虽然会出来效果-但是控制台会包错。键的作用是生成虚拟DOM时-需要使用key来进行标记-DOM更新时进行比较"><a href="#使用了ES6的语法map来进行进行循环-循环时需要注意的是-新版本的React需要使用键-如果没有键虽然会出来效果-但是控制台会包错。键的作用是生成虚拟DOM时-需要使用key来进行标记-DOM更新时进行比较" class="headerlink" title="使用了ES6的语法map来进行进行循环,循环时需要注意的是,新版本的React需要使用键,如果没有键虽然会出来效果,但是控制台会包错。键的作用是生成虚拟DOM时,需要使用key来进行标记,DOM更新时进行比较"></a>使用了ES6的语法map来进行进行循环,循环时需要注意的是,新版本的React需要使用键,如果没有键虽然会出来效果,但是控制台会包错。键的作用是生成虚拟DOM时,需要使用key来进行标记,DOM更新时进行比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">function NameList(props) &#123;</span><br><span class="line">  const names = props.names;</span><br><span class="line">  const listItems = names.map((name) =&gt;</span><br><span class="line">    &lt;li key=&#123;name.toString()&#125;&gt;</span><br><span class="line">      &#123;name&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">const names = [&apos;Vue.js&apos;,&apos;AngularJS&apos;,&apos;React&apos;];</span><br><span class="line">ReactDOM.render(</span><br><span class="line"> &lt;NameList names=&#123;names&#125; /&gt;,</span><br><span class="line">  document.getElementById(&apos;demo&apos;)</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="JSX允许直接在模版中插入JavaScript变量-如果这个变量是一个数组-则会扩展此数组的所有成员"><a href="#JSX允许直接在模版中插入JavaScript变量-如果这个变量是一个数组-则会扩展此数组的所有成员" class="headerlink" title="JSX允许直接在模版中插入JavaScript变量,如果这个变量是一个数组,则会扩展此数组的所有成员"></a>JSX允许直接在模版中插入JavaScript变量,如果这个变量是一个数组,则会扩展此数组的所有成员</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">   let arr = [</span><br><span class="line">        &lt;h1&gt;Hello world&lt;/h1&gt;,</span><br><span class="line">        &lt;h2&gt;学习React&lt;/h2&gt;,</span><br><span class="line">      ];</span><br><span class="line">      ReactDOM.render(</span><br><span class="line">        &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</span><br><span class="line">        document.getElementById(&apos;demo&apos;)</span><br><span class="line">      );</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>总结:React在不使用JSX的情况下一样可以工作,然而使用JSX可以提高组件的可读性,因此推荐使用JSX</p><h1 id="组件-amp-Props"><a href="#组件-amp-Props" class="headerlink" title="组件 &amp; Props"></a>组件 &amp; Props</h1><h1 id="State-amp-生命周期"><a href="#State-amp-生命周期" class="headerlink" title="State &amp; 生命周期"></a>State &amp; 生命周期</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React简介&quot;&gt;&lt;a href=&quot;#React简介&quot; class=&quot;headerlink&quot; title=&quot;React简介&quot;&gt;&lt;/a&gt;React简介&lt;/h1&gt;&lt;p&gt;React起源于facebook公司,起初用于Instagram网站开发,React是一个用于构建用
      
    
    </summary>
    
    
      <category term="React" scheme="https://geekes.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://geekes.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程</title>
    <link href="https://geekes.github.io/2019/11/10/Docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://geekes.github.io/2019/11/10/Docker入门教程/</id>
    <published>2019-11-10T04:57:19.000Z</published>
    <updated>2019-11-10T05:33:34.506Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Docker" scheme="https://geekes.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://geekes.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入门教程</title>
    <link href="https://geekes.github.io/2019/11/10/Nginx%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://geekes.github.io/2019/11/10/Nginx入门教程/</id>
    <published>2019-11-10T04:52:49.000Z</published>
    <updated>2019-11-10T05:33:52.938Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Nginx" scheme="https://geekes.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://geekes.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>PHP入门教程</title>
    <link href="https://geekes.github.io/2019/10/29/PHP%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://geekes.github.io/2019/10/29/PHP入门教程/</id>
    <published>2019-10-29T00:34:20.000Z</published>
    <updated>2019-10-29T00:34:20.694Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
